;; ***********************************************************************************************
;; Gareth Sharpe (20337731)
;; CS 135 Winter 2016
;; Assignment 09, Question 2
;; ***********************************************************************************************

;; (x-coords-of-posns a-list) consumes a list and produces the list
;;     of all of the x-coordinates of the Posns in the list.
;; x-coords-of-posns: (listof Any) -> (listof Num)

;; Examples:
(check-expect (x-coords-of-posns (list 1 2 (make-posn 3 4) (make-posn 5 6) "posn"))
              (list 3 5))
(check-expect (x-coords-of-posns (list (make-posn 0 0) (make-posn empty empty) "make-posn 3 4" empty 1 'sym))
              (list 0 empty))

(define (x-coords-of-posns a-list)
  (foldr (lambda (x base) (cond [(posn? x) (cons (posn-x x) base)] [else base])) empty a-list))

;; Tests:
(check-expect (x-coords-of-posns (list empty)) '())
(check-expect (x-coords-of-posns (list (list 1 2 3) (list (make-posn -2 -3) (make-posn 0 9)) (make-posn 0.5 10)))
              (list 0.5))
(check-expect (x-coords-of-posns (list (make-posn 1 "anything") (make-posn "x-value" "y-value")))
              (list 1 "x-value"))

;; (alternating-sum alon) consumes a list of numbers and produces the
;;    alternating sum of that list.
;; alternating-sum: (listof Num) -> Num

;; Examples:
(check-expect (alternating-sum (list 1 2 3 4 5 6 7 8 9)) 5)
(check-expect (alternating-sum '()) 0)
(check-expect (alternating-sum (list -5 2 -4 0.5 1 2 0)) -12.5)

(define (alternating-sum alon) 
  (foldr - 0 alon)) ;; (nX - (n4 - (n3 - (n2 - (n1 - 0)))) equals n1 - n2 + n3 - n4 ... nX
                    ;; foldr - 0 (list 1 2 3 4) is (4 - (3 - (2 - (1 - 0)))).

;; Tests:
(check-expect (alternating-sum (list 9 8 7 6 5 4 3 2 1 0)) 5)
(check-expect (alternating-sum (list -5 -4 -3 -2 -1 0)) -3)
(check-expect (alternating-sum (list 1234 1234 1234 1234)) 0)
(check-expect (alternating-sum (list 1 2 3 4)) -2)

;; (remove-duplicates a-list) consumes a list of numbers and removes
;;    the occurances of duplicate numbers.
;; remove-duplicates: (listof Num) -> (listof Num)

;; Examples:
(check-expect (remove-duplicates (list 1 2 3 4 5)) (list 1 2 3 4 5))
(check-expect (remove-duplicates (list 1 2 3 1 2 3 1 2 3)) (list 1 2 3))
(check-expect (remove-duplicates (list 3 2 1 3 2 1 0)) (list 3 2 1 0))
(check-expect (remove-duplicates (list 55.4 23.1 22 89 -32.4 -6 -23.1 23.1))
              (list 55.4 23.1 22 89 -32.4 -6 -23.1))

(define (remove-duplicates a-list)
  (foldr (lambda (x y) (cons x (filter (lambda (z) (not (equal? x z))) y))) empty a-list))

;; Tests:
(check-expect (remove-duplicates '()) '())
(check-expect (remove-duplicates '(1 2 3 3 2 1 1 2 3 3 3)) '(1 2 3))
(check-expect (remove-duplicates '("does this work with strings?" "does this work with strings?" "it does!"))
              '("does this work with strings?" "it does!"))
(check-expect (remove-duplicates '(a b c d e f g h i j a k l m n o o p)) '(a b c d e f g h i j k l m n o p))
(check-expect (remove-duplicates '((1 2 3) (3 2 1) (1 2 3))) '((1 2 3) (3 2 1)))
(check-expect (remove-duplicates (list (make-posn 3 4) (make-posn 3 4) 'a "a" 'b 'b "best-fn yet" (make-posn 1 2)))
              (list (make-posn 3 4) 'a "a" 'b "best-fn yet" (make-posn 1 2)))

;; (first-col a-list The function first-col which consumes a list of non-empty
;;    list of numbers, denoting a rectangular matrix of numbers, and produces the
;;    first column of the matrix, as a list.
;; first-col: (list (listof Num)) -> (listof Num)
;; requres: (listof Num) cannot be an empty list

;; Examples:
(check-expect (first-col (list (list 1 2 3)
                               (list 4 5 6)
                               (list 7 8 9))) (list 1 4 7))
(check-expect (first-col (list (list 1 2 3)
                               (list 1 2)
                               (list 0 4 5 6))) (list 1 1 0))
                              
(define (first-col a-list)
  (foldr (lambda (x base) (cons (first x) base)) empty a-list))

;; Tests:
(check-expect (first-col (list (list -2 0 1 4 6))) (list -2))
(check-expect (first-col (list (list 1)
                               (list 2)
                               (list 3))) (list 1 2 3))
(check-expect (first-col (list (list 0.5 1 1.5)
                               (list 2 4 6)
                               (list -4 -3 -2 -1))) (list 0.5 2 -4))
(check-expect (first-col (list (list "This" "doesn't")
                               (list "still" "doesn't")
                               (list "works" "at all"))) (list "This" "still" "works"))

;; (add1-mat alo-alon) consumes a (listof (listof Num)), denoting a
;;    rectangular matrix of numbers, and produces the matrix resulting
;;    from adding 1 to every entry of the matrix.
;; add1-mat: (listof (listof Num)) -> (listof (listof Num))

;; Examples:
(check-expect (add1-mat (list (list 1 2 3) (list 1 2 3) (list 1 2 3)))
              (list (list 2 3 4) (list 2 3 4) (list 2 3 4)))
(check-expect (add1-mat (list (list -11 -1 9) (list -1 0 1) (list 0.5 -0.5 -1.5)))
              (list (list -10 0 10) (list 0 1 2) (list 1.5 0.5 -0.5)))

(define (add1-mat alo-alon)
  (foldr (lambda (list base)
           (cons (foldr (lambda (element base) (cons (add1 element) base)) empty list) base)) empty alo-alon))

;; Tests:
(check-expect (add1-mat (list (list 0))) (list (list 1)))
(check-expect (add1-mat (list (list 1029387124596 11928347 0986231324 0978307)))
              (list (list 1029387124597 11928348 0986231325 0978308)))
(check-expect (add1-mat (list (list -982342346 (* 25 4) (* 0 1) (/ 25 5) (sqr 5))))
              (list (list -982342345 101 1 6 26)))
(check-expect (add1-mat (list (list 0 0 0 0)
                              (list 0 0 0 0)
                              (list 0 0 0 0)
                              (list 0 0 0 0)))
              (list (list 1 1 1 1)
                    (list 1 1 1 1)
                    (list 1 1 1 1)
                    (list 1 1 1 1)))

;; (sum-at-zero alof) consumes a list of functions where each function consumes
;;    and produces a number), and produces the value f1(0) + ··· + fn(0).
;; sum-at-zero: (listof (Num -> Num)) -> Num

;; Examples:
(check-expect (sum-at-zero (list add1 sqr add1 add1)) 3)
(check-expect (sum-at-zero (list add1 add1 sub1 add1)) 2)
(check-expect (sum-at-zero (list sqr)) 0)
(check-expect (sum-at-zero (list)) 0)

(define (sum-at-zero alof)
  (foldl (lambda (x base) (x base)) 0 alof))

;; Tests:
(check-expect (sum-at-zero (list add1 add1 sqr add1 sqr)) 25)
(check-expect (sum-at-zero (list number?)) true)
(check-expect (sum-at-zero (list number? boolean?)) true)
(check-expect (sum-at-zero '()) 0)
(check-expect (sum-at-zero (list sin cos)) 1)
(check-expect (sum-at-zero (list cos angle cos add1 add1 add1 sqrt)) 2)
(check-expect (sum-at-zero (list sub1 abs exp log inexact->exact)) 1)
